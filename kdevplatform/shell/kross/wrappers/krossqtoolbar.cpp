//This is file has been generated by xmltokross, you should not edit this file but the files used to generate it.

#include <QtCore/QObject>
#include <QtCore/QVariant>
#include <kross/core/manager.h>
#include <kross/core/wrapperinterface.h>
#include <QToolBar>

class KrossQToolBar : public QObject, public Kross::WrapperInterface
{
	Q_OBJECT
	public:
		KrossQToolBar(QToolBar* obj, QObject* parent=0) : QObject(parent), wrapped(obj)		{ setObjectName("QToolBar"); }
		void* wrappedObject() const { return wrapped; }

		Q_PROPERTY(const QMetaObject  staticMetaObject READ getstaticMetaObject SCRIPTABLE true)
		Q_SCRIPTABLE const QMetaObject  getstaticMetaObject() const { return wrapped->staticMetaObject; }
		Q_SCRIPTABLE void setMovable(bool x0) { wrapped->setMovable(x0); }
		Q_SCRIPTABLE bool isMovable() const { return wrapped->isMovable(); }
		Q_SCRIPTABLE void setAllowedAreas(Qt::ToolBarAreas x0) { wrapped->setAllowedAreas(x0); }
		Q_SCRIPTABLE Qt::ToolBarAreas allowedAreas() const { return wrapped->allowedAreas(); }
		Q_SCRIPTABLE bool isAreaAllowed(Qt::ToolBarArea x0) const { return wrapped->isAreaAllowed(x0); }
		Q_SCRIPTABLE void setOrientation(Qt::Orientation x0) { wrapped->setOrientation(x0); }
		Q_SCRIPTABLE Qt::Orientation orientation() const { return wrapped->orientation(); }
		Q_SCRIPTABLE void clear() { wrapped->clear(); }
		Q_SCRIPTABLE QAction* addAction(const QString& x0) { return wrapped->addAction(x0); }
		Q_SCRIPTABLE QAction* addAction(const QIcon& x0, const QString& x1) { return wrapped->addAction(x0, x1); }
		Q_SCRIPTABLE QAction* addAction(const QString& x0, const QObject* x1, const char* x2) { return wrapped->addAction(x0, x1, x2); }
		Q_SCRIPTABLE QAction* addAction(const QIcon& x0, const QString& x1, const QObject* x2, const char* x3) { return wrapped->addAction(x0, x1, x2, x3); }
		Q_SCRIPTABLE QAction* addSeparator() { return wrapped->addSeparator(); }
		Q_SCRIPTABLE QAction* insertSeparator(QAction* x0) { return wrapped->insertSeparator(x0); }
		Q_SCRIPTABLE QAction* addWidget(QWidget* x0) { return wrapped->addWidget(x0); }
		Q_SCRIPTABLE QAction* insertWidget(QAction* x0, QWidget* x1) { return wrapped->insertWidget(x0, x1); }
		Q_SCRIPTABLE QRect actionGeometry(QAction* x0) const { return wrapped->actionGeometry(x0); }
		Q_SCRIPTABLE QAction* actionAt(const QPoint& x0) const { return wrapped->actionAt(x0); }
		Q_SCRIPTABLE QAction* actionAt(int x0, int x1) const { return wrapped->actionAt(x0, x1); }
		Q_SCRIPTABLE QAction* toggleViewAction() const { return wrapped->toggleViewAction(); }
		Q_SCRIPTABLE QSize iconSize() const { return wrapped->iconSize(); }
		Q_SCRIPTABLE Qt::ToolButtonStyle toolButtonStyle() const { return wrapped->toolButtonStyle(); }
		Q_SCRIPTABLE QWidget* widgetForAction(QAction* x0) const { return wrapped->widgetForAction(x0); }
		Q_SCRIPTABLE bool isFloatable() const { return wrapped->isFloatable(); }
		Q_SCRIPTABLE void setFloatable(bool x0) { wrapped->setFloatable(x0); }
		Q_SCRIPTABLE bool isFloating() const { return wrapped->isFloating(); }
		Q_SCRIPTABLE void setIconSize(const QSize& x0) { wrapped->setIconSize(x0); }
		Q_SCRIPTABLE void setToolButtonStyle(Qt::ToolButtonStyle x0) { wrapped->setToolButtonStyle(x0); }
	private:
		QToolBar* wrapped;
};

bool krossqtoolbar_registerHandler(const QByteArray& name, Kross::MetaTypeHandler::FunctionPtr* handler)
{ Kross::Manager::self().registerMetaTypeHandler(name, handler); return false; }

namespace Handlers
{
QVariant _qToolBarHandler(void* type)
{
	if(!type) return QVariant();
	QToolBar* t=static_cast<QToolBar*>(type);
	Q_ASSERT(dynamic_cast<QToolBar*>(t));
	return qVariantFromValue((QObject*) new KrossQToolBar(t, 0));
}
bool b_QToolBar=krossqtoolbar_registerHandler("QToolBar*", _qToolBarHandler);
QVariant qToolBarHandler(QToolBar* type){ return _qToolBarHandler(type); }
QVariant qToolBarHandler(const QToolBar* type) { return _qToolBarHandler((void*) type); }

}
#include "krossqtoolbar.moc"
